package dao;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Map;

import entities.EntityClass;
import exception.NoResultException;
import exception.InvalidNumberReslut;
import utils.bdd.DBConnector;
import utils.LogsHandler;

public abstract class Dao {
	DBConnector db;
	LogsHandler errorHandler;
	
	public Dao(DBConnector db, LogsHandler errorHandler) {
		this.db = db;
		this.errorHandler = errorHandler;
	}
	
	//===================================================================================
    /*
     * 
     */
    public boolean add(EntityClass entityClass) throws NoResultException, SQLException {
    	long id = db.executePreparedSQL(
											"INSERT INTO " + entityClass.table().getName() +" (" + entityClass.table().getFields() + ") " +
											"VALUES (" + entityClass.table().getFieldsPrepared() + ");",
											entityClass.table().hasAutoGeneratedField(),
											entityClass.fieldsValues()
										);
		boolean res = id  > 0;
		if(entityClass.table().hasAutoGeneratedField())
			entityClass.setId(id);
		errorHandler.addDebug("Insert " + (res ? "success" : "error") + " in " + entityClass.table().getName() + " | result: " + id);
		
		return res;
    }

    
    //===================================================================================
    /*
     * 
     */
    public boolean update(EntityClass entityClass) throws NoResultException, SQLException {
    	boolean res = db.executePreparedSQL(
												"UPDATE " + entityClass.table().getName() + " " +
												"SET " + entityClass.table().getFieldsSet() + " " +
												"WHERE " + entityClass.table().getIDSet() + ";",
												false,
												addArrayElem(entityClass.fieldsValues(), entityClass.getId())
											) > 0;

		errorHandler.addDebug("Update " + (res ? "success" : "error") + " in " + entityClass.table().getName());
		return res;
    }
    //------------------------------------------------------------
    private Object[] addArrayElem(Object[] arr, Object elem) {
    	Object[] newArray = new Object[arr.length+1];
        System.arraycopy(arr, 0, newArray, 0, arr.length);
        newArray[arr.length] = elem;
    	return newArray;
    }
    

    //===================================================================================
    /*
     * 
     */
    public boolean delete(EntityClass entityClass) throws NoResultException, SQLException {
    	boolean res = db.executePreparedSQL(
												"DELETE FROM " + entityClass.table().getName() +" " +
												"WHERE " + entityClass.table().getIDSet() + ";",
												false,
												new Object[]{entityClass.getId()}
											) > 0;
				
		errorHandler.addDebug("Delete " + (res ? "success" : "error") + " in " + entityClass.table().getName());
		return res;
	}
        
    //===================================================================================
    /*
     * 
     */
    protected ArrayList<Map<String, Object>> queryList(String queryString, Object[] values) throws SQLException {
  		return db.executeQuerySQL(queryString, values);
    }
    //------------------------------------------------------------
    protected ArrayList<Map<String, Object>> queryList(String queryString) throws SQLException {
    	return queryList(queryString, new Object[]{});
    }
    
    //===================================================================================
    /*
     * 
     */
    protected Map<String, Object> query(String queryString, Object[] values) throws SQLException, InvalidNumberReslut {
    	ArrayList<Map<String, Object>> res = db.executeQuerySQL(queryString, values);
    	if(res.size() != 1)
    		throw new InvalidNumberReslut(res.size());
    	return res.get(0);
    }
    //------------------------------------------------------------
    protected Map<String, Object> query(String queryString) throws SQLException, InvalidNumberReslut {
    	return query(queryString, new Object[]{});
    }
    
}
