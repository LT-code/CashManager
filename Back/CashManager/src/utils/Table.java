package utils;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Map;

import exception.FailedDBConnection;

public class Table {
	private String name;
	private String entityLogName;
	private TableFields[] fields;
	
	private String sFields = "";
	private String sFieldsSet = "";
	private String sFieldsPrepared = "";
	private String sIdSet = "";
	
	
	public Table(String name, String entityLogName, TableFields[] fields) {
		this.name = name;
		this.fields = fields;
		this.entityLogName = entityLogName;
	}
	
	public boolean hasAutoGeneratedField() {
		for(int i = 0; i < fields.length; i++)
			if(fields[i].isAutoGenerated())
				return true;
		return false;
	}
	
	public String getName() {
		return this.name;
	}
	
	public String getFieldsPrepared() {
		if(sFieldsPrepared != "") return sFieldsPrepared;
		for(int i = 0; i < fields.length; i++)
			if(!(fields[i].getKeyType() == TableFields.KEY_PRIMARY && fields[i].getType() == TableFields.TYPE_INT ))
				sFieldsPrepared += (sFieldsPrepared == "" ? "" : ", ") + "?";
		return sFieldsPrepared;
	}
	
	public String getFields() {
		if(sFields != "") return sFields;
		for(int i = 0; i < fields.length; i++)
			if(!(fields[i].getKeyType() == TableFields.KEY_PRIMARY && fields[i].getType() == TableFields.TYPE_INT ))
				sFields += (sFields == "" ? "" : ", ") + fields[i].getName();
		return sFields;
	}
	
	public String getFieldsSet() {
		if(sFieldsSet != "") return sFieldsSet;
		for(int i = 0; i < fields.length; i++)
			if(!(fields[i].getKeyType() == TableFields.KEY_PRIMARY && fields[i].getType() == TableFields.TYPE_INT ))
				sFieldsSet += (sFieldsSet == "" ? "" : ", ") + fields[i].getPreparedField();
		return sFieldsSet;
	}
	
	public String getIDSet() {
		if(sIdSet != "") return sIdSet;
		for(int i = 0; i < fields.length; i++)
			if(fields[i].getKeyType() == TableFields.KEY_PRIMARY)
				sIdSet += (sIdSet == "" ? "" : ", ") + fields[i].getPreparedField();
		return sIdSet;
	}
	
	public String getTableToSQL() {
		String res = "create table " + name + " (";
		for(int i = 0; i < fields.length; i++) {
			res += 	"  " + (i < 1 ? "" : ", ") +
					fields[i].getName() + " " +
					fields[i].getTypeString() + " " +
					(fields[i].isAutoGenerated() ? "AUTO_INCREMENT " : "") +
					(fields[i].isPrimaryKey() ? "PRIMARY KEY " : "") +
					(fields[i].isUnique() ? "UNIQUE " : 
						(fields[i].getKeyType() != TableFields.KEY_FOREIGN ? "not null" : ""));
					
			if(fields[i].getKeyType() == TableFields.KEY_FOREIGN)
				res += ", FOREIGN KEY (" + fields[i].getName() + ") REFERENCES " + fields[i].getAssociatedTable();
		}
			
		res += ")";
		return res;
	}
	
	public boolean isDifferentTable(DBConnector db) {
		ArrayList<Map<String, Object>> tableCurrentTable = null;
    	try{tableCurrentTable = db.executeQuerySQL("describe " + name + ";", new Object[]{});}catch(Exception e) {};
    	
    	if(tableCurrentTable != null)
    		if(tableCurrentTable.size() == fields.length) {
    			for(int i = 0; i < tableCurrentTable.size(); i++) {
	    			if(!tableCurrentTable.get(i).get("COLUMN_NAME").equals(fields[i].getName()))
	    				return true;
    				if(!tableCurrentTable.get(i).get("COLUMN_TYPE").equals(fields[i].getTypeString()))
    					return true;
    				if(fields[i].isPrimaryKey())
    					if(!tableCurrentTable.get(i).get("COLUMN_KEY").equals("PRI"))
    							return true;
    				if(fields[i].isUnique())
    					if(!tableCurrentTable.get(i).get("COLUMN_KEY").equals("UNI"))
    							return true;	
    				if(fields[i].getKeyType() == TableFields.KEY_FOREIGN)
    					if(!tableCurrentTable.get(i).get("COLUMN_KEY").equals("MUL"))
    							return true;
    				if(fields[i].isAutoGenerated())
    					if(!tableCurrentTable.get(i).get("EXTRA").equals("auto_increment"))
    							return true;
	    		}
    			return false;
    		}
	    return true;	
	}

	public boolean createTable() throws SQLException, FailedDBConnection, ClassNotFoundException {    
		DBConnector db = new DBConnector(new LogsHandler());
    	boolean toReturn;
		
    	if(toReturn = isDifferentTable(db)) {
    		db.executeSQL("SET foreign_key_checks = 0;");
    		db.executeSQL("drop table if exists " + name);
    		db.executeSQL(this.getTableToSQL());
    		db.executeSQL("SET foreign_key_checks = 1;");
    		System.out.println(this.getName() + " creation succed");
    	}
    	else
    		System.out.println(this.getName() + " was not changed");
    		 
		db.close();
      	return toReturn;
    }

	public String entityNameClass() {
		return entityLogName;
	}
}