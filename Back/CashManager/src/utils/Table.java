package utils;

import java.sql.SQLException;

import exception.FailedDBConnection;

public class Table {
	private String name;
	private String entityLogName;
	private TableFields[] fields;
	
	private String sFields = "";
	private String sFieldsSet = "";
	private String sFieldsPrepared = "";
	private String sIdSet = "";
	
	
	public Table(String name, String entityLogName, TableFields[] fields) {
		this.name = name;
		this.fields = fields;
		this.entityLogName = entityLogName;
	}
	
	public boolean hasAutoGeneratedField() {
		for(int i = 0; i < fields.length; i++)
			if(fields[i].isAutoGenerated())
				return true;
		return false;
	}
	
	public String getName() {
		return this.name;
	}
	
	public String getFieldsPrepared() {
		if(sFieldsPrepared != "") return sFieldsPrepared;
		for(int i = 0; i < fields.length; i++)
			if(!(fields[i].getKeyType() == TableFields.KEY_PRIMARY && fields[i].getType() == TableFields.TYPE_INT ))
				sFieldsPrepared += (sFieldsPrepared == "" ? "" : ", ") + "?";
		return sFieldsPrepared;
	}
	
	public String getFields() {
		if(sFields != "") return sFields;
		for(int i = 0; i < fields.length; i++)
			if(!(fields[i].getKeyType() == TableFields.KEY_PRIMARY && fields[i].getType() == TableFields.TYPE_INT ))
				sFields += (sFields == "" ? "" : ", ") + fields[i].getName();
		return sFields;
	}
	
	public String getFieldsSet() {
		if(sFieldsSet != "") return sFieldsSet;
		for(int i = 0; i < fields.length; i++)
			if(!(fields[i].getKeyType() == TableFields.KEY_PRIMARY && fields[i].getType() == TableFields.TYPE_INT ))
				sFieldsSet += (sFieldsSet == "" ? "" : ", ") + fields[i].getPreparedField();
		return sFieldsSet;
	}
	
	public String getIDSet() {
		if(sIdSet != "") return sIdSet;
		for(int i = 0; i < fields.length; i++)
			if(fields[i].getKeyType() == TableFields.KEY_PRIMARY)
				sIdSet += (sIdSet == "" ? "" : ", ") + fields[i].getPreparedField();
		return sIdSet;
	}
	
	public String getTableToSQL() {
		String res = "create table " + name + " (";
		for(int i = 0; i < fields.length; i++) {
			res += 	(i < 1 ? "\n" : ", \n") +
					fields[i].getName() + " " +
					fields[i].getTypeString() + " " +
					(fields[i].getType() == TableFields.TYPE_INT &&
					 fields[i].getKeyType() == TableFields.KEY_PRIMARY ? "AUTO_INCREMENT " : " ") +
					(fields[i].getKeyType() == TableFields.KEY_PRIMARY ? "PRIMARY KEY " : " ") +
					(fields[i].getKeyType() == TableFields.KEY_UNIQUE ? "UNIQUE " : 
						(fields[i].getKeyType() != TableFields.KEY_FOREIGN ? "not null" : ""));
					
			if(fields[i].getKeyType() == TableFields.KEY_FOREIGN)
				res += ",\nFOREIGN KEY (" + fields[i].getName() + ") REFERENCES " + fields[i].getAssociatedTable();
		}
			
		res += "\n)";
		return res;
	}

	public void createTable() throws SQLException, FailedDBConnection {    
    	DBConnector db;
    	
    	if((db = new DBConnector(new LogsHandler())).isConnected()) {
    		db.executeSQL(this.getTableToSQL());
          	db.close();
          	System.out.println(this.getName() + " creation succed");
    	}
    }

	public String entityNameClass() {
		return entityLogName;
	}
}